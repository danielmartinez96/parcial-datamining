library("caTools")
library("randomForest")
library("class")
library("car")
#Average_montly
logit <- lm(formula = left ~ ., data = raw_data)
summary(logit)
vif(logit)
#Average_montly
logit <- lm(formula = time_spend_company ~ average_montly_hours, data = raw_data)
summary(logit)
vif(logit)
#Average_montly
logit <- lm(formula = left ~time_spend_company+ average_montly_hours, data = raw_data)
summary(logit)
vif(logit)
#summary(modelo)
#step(object = modelo, direction = "both", trace = 1)
#Average_montly
logit <- lm(formula = left ~time_spend_company+ average_montly_hours, data = raw_data)
vif(logit)
#summary(modelo)
#step(object = modelo, direction = "both", trace = 1)
#Average_montly
logit <- lm(formula = left ~ last_evaluation + satisfaction_level, data = raw_data)
vif(logit)
#summary(modelo)
#step(object = modelo, direction = "both", trace = 1)
#Average_montly
logit <- lm(formula = left ~ last_evaluation + satisfaction_level+average_montly_hours, data = raw_data)
vif(logit)
#summary(modelo)
#step(object = modelo, direction = "both", trace = 1)
#Average_montly
logit <- lm(formula = left ~ last_evaluation + satisfaction_level+average_montly_hours+number_poject, data = raw_data)
#Average_montly
logit <- lm(formula = left ~ last_evaluation + satisfaction_level+average_montly_hours+number_project, data = raw_data)
vif(logit)
#summary(modelo)
#step(object = modelo, direction = "both", trace = 1)
#Average_montly
logit <- lm(formula = left ~ ., data = raw_data)
step(object = modelo, direction = "both", trace = 1)
vif(logit)
#Average_montly
logit <- lm(formula = left ~ ., data = raw_data)
step(object = modelo, direction = "both", trace = 1)
logit <- glm(formula = left ~ satisfaction_level + last_evaluation + number_project +
average_montly_hours + time_spend_company + Work_accident +
promotion_last_5years + sales_hr + sales_IT + sales_management +
sales_product_mng + sales_RandD + salary_high + salary_low,
data = raw_data)
vif(logit)
#summary(modelo)
#step(object = modelo, direction = "both", trace = 1)
#Average_montly
logit <- lm(formula = left ~ ., data = raw_data)
step(object = modelo, direction = "both", trace = 1)
logit <- lm(formula = left ~ satisfaction_level + last_evaluation + number_project +
average_montly_hours + time_spend_company + Work_accident +
promotion_last_5years + sales_hr + sales_IT + sales_management +
sales_product_mng + sales_RandD + salary_high + salary_low,
data = raw_data)
vif(logit)
#summary(modelo)
#step(object = modelo, direction = "both", trace = 1)
#Average_montly
logit <- lm(formula = number_project ~ average_montly_hours, data = raw_data)
#step(object = modelo, direction = "both", trace = 1)
#logit <- lm(formula = left ~ satisfaction_level + last_evaluation + number_project + average_montly_hours + time_spend_company + Work_accident + promotion_last_5years + sales_hr + sales_IT + sales_management + sales_product_mng + sales_RandD + salary_high + salary_low, data = raw_data)
vif(logit)
#Average_montly
logit <- lm(formula = left ~ number_project+average_montly_hours, data = raw_data)
#step(object = modelo, direction = "both", trace = 1)
#logit <- lm(formula = left ~ satisfaction_level + last_evaluation + number_project + average_montly_hours + time_spend_company + Work_accident + promotion_last_5years + sales_hr + sales_IT + sales_management + sales_product_mng + sales_RandD + salary_high + salary_low, data = raw_data)
vif(logit)
#summary(modelo)
#step(object = modelo, direction = "both", trace = 1)
#Average_montly
logit <- lm(formula = left ~ number_project+average_montly_hours, data = raw_data)
#step(object = modelo, direction = "both", trace = 1)
modelo <- glm(formula = left ~ satisfaction_level + last_evaluation + number_project + average_montly_hours + time_spend_company + Work_accident + promotion_last_5years + sales_hr + sales_IT + sales_management + sales_product_mng + sales_RandD + salary_high + salary_low, data = raw_data)
vif(logit)
#summary(modelo)
#step(object = modelo, direction = "both", trace = 1)
# Dividimos el dataset en dos
# El primer conjunto para el entrenamiento que consiste en un 70% de las observaciones.
data_train_1 <- sample_frac(raw_data, 0.7)
prop.table(table(data_train_1$left))
# El segundo conjunto es para el testing que consiste en el 30% de las observaciones restantes.
data_test_1 <- setdiff(raw_data, data_train_1)
prop.table(table(data_test_1$left))
data_train_1$left <- factor(data_train_1$left)
data_test_1$left <- factor(data_test_1$left)
# Implementación el árbol de decisión.
tree_1 <- rpart(formula = left ~ ., data = data_train_1)
tree_1
# Graficamos el árbol de decisión
rpart.plot(tree_1)
# Generamos un vector con los valores predichos
prediccion <- predict(tree_1, newdata = data_test_1, type = "class")
# Cruzamiento de la predicción con los datos reales del dataset de prueba
confusionMatrix(prediccion, data_test_1[["left"]])
install.packages("e1071")
library(e1071)
# Generamos un vector con los valores predichos
prediccion <- predict(tree_1, newdata = data_test_1, type = "class")
# Cruzamiento de la predicción con los datos reales del dataset de prueba
confusionMatrix(prediccion, data_test_1[["left"]])
data_train_3 <- sample_frac(raw_data, 0.7)
data_test_3 <- setdiff(raw_data, data_train_3)
data_train_3$left <- factor(data_train_3$left)
data_test_3$left <- factor(data_test_3$left)
tree_3 <- rpart(formula = left ~ ., data = data_train_3)
rpart.plot(tree_3)
prediccion_3 <- predict(tree_3, newdata = data_test_3, type = "class")
confusionMatrix(prediccion_3, data_test_3[["left"]])
glm.model <- glm(formula = left ~ ., data = data_train_1, family = binomial(modelo))
glm.model <- glm(formula = left ~ ., data = data_train_1, family = binomial(modelo))
glm.model <- glm(formula = left ~ ., data = data_train_1, family = binomial(modelo))
glm.model <- glm(formula = left ~ ., data = data_train_1, family = binomial(modelo))
glm.model <- glm(formula =left ~ satisfaction_level + last_evaluation + number_project + average_montly_hours + time_spend_company + Work_accident + promotion_last_5years + sales_hr + sales_IT + sales_management + sales_product_mng + sales_RandD + salary_high + salary_low, data = data_train_1, family = binomial(modelo))
#Average_montly
logit <- lm(formula = left ~ number_project+average_montly_hours, data = raw_data)
#step(object = modelo, direction = "both", trace = 1)
modelo <- glm(formula = left ~ satisfaction_level + last_evaluation + number_project + average_montly_hours + time_spend_company + Work_accident + promotion_last_5years + sales_hr + sales_IT + sales_management + sales_product_mng + sales_RandD + salary_high + salary_low, data = raw_data, family="binomial")
vif(logit)
#summary(modelo)
#step(object = modelo, direction = "both", trace = 1)
glm.model <- glm(formula =left ~ satisfaction_level + last_evaluation + number_project + average_montly_hours + time_spend_company + Work_accident + promotion_last_5years + sales_hr + sales_IT + sales_management + sales_product_mng + sales_RandD + salary_high + salary_low, data = data_train_1, family = binomial(modelo))
glm.model <- glm(formula =left ~ satisfaction_level + last_evaluation + number_project + average_montly_hours + time_spend_company + Work_accident + promotion_last_5years + sales_hr + sales_IT + sales_management + sales_product_mng + sales_RandD + salary_high + salary_low, data = data_train_1, family = binomial(logit))
summary(glm.model)
lgm.predict <- round(predict(glm.model, data_train_1, type = "response"))
lgm.predict <- factor(lgm.predict)
confusionMatrix(lgm.predict, data_train_1$left)
rf.model <- randomForest(left~., data = data_train_1)
rf.prediction <- predict(rf.model, data_test_1, type = "class")
#Average_montly
logit <- lm(formula = left ~ number_project+average_montly_hours, data = raw_data)
step(object = modelo, direction = "both", trace = 1)
logit <- glm(formula = left ~ satisfaction_level + last_evaluation + number_project + average_montly_hours + time_spend_company + Work_accident + promotion_last_5years + sales_hr + sales_IT + sales_management + sales_product_mng + sales_RandD + salary_high + salary_low, data = raw_data)
vif(logit)
# Establecimiento del directorio de trabajo
setwd("~/workspaces/R/rrhh-left")
# Carga de datos
raw_data <- read.csv("recursos_humanos.csv")
# Realización de un sumario de los datos
summary(raw_data)
str(raw_data)
View(raw_data)
knitr::opts_chunk$set(echo = TRUE)
raw_data <- read.csv("house_data.csv")
library("dplyr")
library("corrplot")
library("fastDummies")
library("ggplot2")
library("rpart")
library("rpart.plot")
library("caret")
library("caTools")
library("randomForest")
library("class")
getwd()
setwd("C:/R/house-pricing")
setwd("C://R//house-pricing")
setwd("D://R//house-pricing")
raw_data <- read.csv("house_data.csv")
plot(price~., data=raw_data,col="blue")
plot(raw_data$sqft_above~raw_data$sqft_basement, data=raw_data,col="blue")
plot(raw_data$sqft_lot~raw_data$sqft_basement+raw_data$sqft_above, data=raw_data,col="blue")
prueba <= filter(raw_data$sqft_lot<5000)
prueba <= filter(raw_data,sqft_lot<5000)
prueba = filter(raw_data,sqft_lot<5000)
plot(prueba$sqft_lot~prueba$sqft_basement+prueba$sqft_above, data=raw_data,col="blue")
plot(price~., data=raw_data,col="blue")
prueba = filter(raw_data,sqft_lot<2000)
plot(prueba$sqft_lot~prueba$sqft_basement+prueba$sqft_above, data=raw_data,col="blue")
prueba = filter(raw_data,sqft_lot<3000)
plot(prueba$sqft_lot~prueba$sqft_basement+prueba$sqft_above, data=raw_data,col="blue")
```{r Librerías}
corrplot(raw_data[,c("sqft_above","sqfl_basement","sqft_lot","sqt_living15","sqft_lot15")],method="square")
cor(raw_data[,c("sqft_above","sqfl_basement","sqft_lot","sqt_living15","sqft_lot15")],method="square")
corrplot(cor(raw_data[,c("sqft_above","sqfl_basement","sqft_lot","sqt_living15","sqft_lot15")]),method="square")
corrplot(cor(raw_data[,c("sqft_above","sqfl_basement","sqft_lot","sqt_living15","sqft_lot15")]),method="square")
View(raw_data)
View(raw_data)
corrplot(cor(raw_data[,c("sqft_above","sqfl_basement","sqft_lot","sqt_living15","sqft_lot15")]),method="square")
View(raw_data)
corrplot(cor(raw_data[,c("sqft_above")]),method="square")
corrplot(cor(raw_data[,c("sqft_above","sqft_living")]),method="square")
corrplot(cor(raw_data[,c("sqft_above","sqft_living","sqft_living15")]),method="square")
corrplot(cor(raw_data[,c("sqft_living","sqft_lot","sqft_above","sqft_living15","sqft_above","sqft_basement")]),method="square")
corrplot(cor(raw_data[,c("sqft_living","sqft_lot","sqft_above","sqft_living15","sqft_lot15","sqft_basement")]),method="square")
matriz=corrplot(cor(raw_data[,c("sqft_living","sqft_lot","sqft_above","sqft_living15","sqft_lot15","sqft_basement")]),method="square")
summary(matriz)
cor(raw_data[,c("sqft_living","sqft_lot","sqft_above","sqft_living15","sqft_lot15","sqft_basement")])
summary(matriz)
matriz=(raw_data[,c("sqft_living","sqft_lot","sqft_above","sqft_living15","sqft_lot15","sqft_basement")])
corrplot(matriz,method="square")
corrplot(cor(raw_data[,c("sqft_living","sqft_lot","sqft_above","sqft_living15","sqft_lot15","sqft_basement")]),method="square")
cor(raw_data[,c("sqft_living","sqft_lot","sqft_above","sqft_living15","sqft_lot15","sqft_basement")])
ver = raw_data$sqft_above/raw_data$sqft_living
ver = raw_data$sqft_above/raw_data$sqft_living
describe(ver)
ver = raw_data$sqft_above/raw_data$sqft_living
summary(ver)
ver = funtion(x,y){
ver = funtion(x,y){
ver = funtion(x,y){
ver = funtion(x,y){
ver = function(x,y){
if(y>0){
return(x/y)
}else
{
return(y)
}
}
ver(raw_data$sqft_above,raw_data$sqft_living)
ver = function(x,y){
if(y>0){
return(x/y)
}else
{
return(y)
}
}
ver(raw_data$sqft_above,raw_data$sqft_living)
ver = function(x,y){
if(y>0){
return(x/y)
}else
{
return(y)
}
}
data.frame(ver(raw_data$sqft_above,raw_data$sqft_living))
ver = function(x,y){
if(y>0){
return(x/y)
}else
{
return(y)
}
}
data.frame(c(ver(raw_data$sqft_above,raw_data$sqft_living)))
ver = function(x,y){
if(y>0){
return(x/y)
}else
{
return(y)
}
}
d=data.frame(c(ver(raw_data$sqft_above,raw_data$sqft_living)))
prueba<= raw_data
prueba= raw_data
prueba$sqft_living=raw_data$sqft_above/raw_data$sqft_living
prueba= raw_data
prueba$sqft_living=raw_data$sqft_above/raw_data$sqft_living
corrplot(cor(prueba[,c("sqft_living","sqft_lot","sqft_above","sqft_living15","sqft_lot15","sqft_basement")]),method="square")
cor(prueba[,c("sqft_living","sqft_lot","sqft_above","sqft_living15","sqft_lot15","sqft_basement")])
prueba= raw_data
prueba$sqft_living=raw_data$sqft_above/raw_data$sqft_living
prueba$sqft_living=raw_data$sqft_above/raw_data$sqft_basement
corrplot(cor(prueba[,c("sqft_living","sqft_lot","sqft_above","sqft_living15","sqft_lot15","sqft_basement")]),method="square")
cor(prueba[,c("sqft_living","sqft_lot","sqft_above","sqft_living15","sqft_lot15","sqft_basement")])
View(prueba)
prueba= raw_data
prueba$sqft_living=raw_data$sqft_above/raw_data$sqft_living
prueba$sqft_living=raw_data$sqft_above/raw_data$sqft_basement
describe(prueba)
prueba= raw_data
prueba$sqft_living=raw_data$sqft_above/raw_data$sqft_living
prueba$sqft_living=raw_data$sqft_above/raw_data$sqft_basement
head(prueba)
corrplot(cor(prueba[,c("sqft_living","sqft_lot","sqft_above","sqft_living15","sqft_lot15","sqft_basement")]),method="square")
cor(prueba[,c("sqft_living","sqft_lot","sqft_above","sqft_living15","sqft_lot15","sqft_basement")])
prueba= raw_data
prueba$sqft_living=raw_data$sqft_above/raw_data$sqft_living
prueba$sqft_basement=raw_data$sqft_above/raw_data$sqft_basement
head(prueba)
corrplot(cor(prueba[,c("sqft_living","sqft_lot","sqft_above","sqft_living15","sqft_lot15","sqft_basement")]),method="square")
cor(prueba[,c("sqft_living","sqft_lot","sqft_above","sqft_living15","sqft_lot15","sqft_basement")])
prueba= raw_data
prueba$sqft_living=raw_data$sqft_above/raw_data$sqft_living
prueba$sqft_basement=raw_data$sqft_above/raw_data$sqft_basement
head(prueba)
summary(prueba)
corrplot(cor(prueba[,c("sqft_living","sqft_lot","sqft_above","sqft_living15","sqft_lot15","sqft_basement")]),method="square")
cor(prueba[,c("sqft_living","sqft_lot","sqft_above","sqft_living15","sqft_lot15","sqft_basement")])
prueba= raw_data
prueba <= mutate(prueba,sqft_living=raw_data$sqft_above/raw_data$sqft_living)
#prueba$sqft_living=raw_data$sqft_above/raw_data$sqft_living
#prueba$sqft_basement=raw_data$sqft_above/raw_data$sqft_basement
head(prueba)
summary(prueba)
corrplot(cor(prueba[,c("sqft_living","sqft_lot","sqft_above","sqft_living15","sqft_lot15","sqft_basement")]),method="square")
cor(prueba[,c("sqft_living","sqft_lot","sqft_above","sqft_living15","sqft_lot15","sqft_basement")])
prueba= raw_data
prueba <= mutate(prueba,nuevo=raw_data$sqft_above/raw_data$sqft_living)
prueba= raw_data
prueba <= mutate(prueba,data.nuevo=raw_data$sqft_above/raw_data$sqft_living)
prueba= raw_data
prueba <= mutate(prueba,data.nuevo=raw_data$sqft_above/raw_data$sqft_living)
prueba= raw_data
prueba = mutate(prueba,data.nuevo=raw_data$sqft_above/raw_data$sqft_living)
#prueba$sqft_living=raw_data$sqft_above/raw_data$sqft_living
#prueba$sqft_basement=raw_data$sqft_above/raw_data$sqft_basement
head(prueba)
summary(prueba)
corrplot(cor(prueba[,c("sqft_living","sqft_lot","sqft_above","sqft_living15","sqft_lot15","sqft_basement")]),method="square")
cor(prueba[,c("sqft_living","sqft_lot","sqft_above","sqft_living15","sqft_lot15","sqft_basement")])
prueba= raw_data
prueba = mutate(prueba,data.nuevo=raw_data$sqft_above/raw_data$sqft_living)
#prueba$sqft_living=raw_data$sqft_above/raw_data$sqft_living
#prueba$sqft_basement=raw_data$sqft_above/raw_data$sqft_basement
head(prueba)
summary(prueba)
corrplot(cor(prueba[,c("data.nuevo","sqft_lot","sqft_above","sqft_living15","sqft_lot15","sqft_basement")]),method="square")
cor(prueba[,c("data.nuevo","sqft_lot","sqft_above","sqft_living15","sqft_lot15","sqft_basement")])
prueba= raw_data
prueba = mutate(prueba,sqft_living.nuevo=raw_data$sqft_above/raw_data$sqft_living)
prueba = mutate(prueba,sqft_basement.nuevo=ifelse(raw_data$sqft_basement>0,raw_data$sqft_above/raw_data$sqft_basement,0))
#prueba$sqft_living=raw_data$sqft_above/raw_data$sqft_living
#prueba$sqft_basement=raw_data$sqft_above/raw_data$sqft_basement
head(prueba)
summary(prueba)
corrplot(cor(prueba[,c("sqft_living.nuevo","sqft_lot","sqft_above","sqft_living15","sqft_lot15","sqft_basement.nuevo")]),method="square")
cor(prueba[,c("sqft_living.nuevo","sqft_lot","sqft_above","sqft_living15","sqft_lot15","sqft_basement.nuevo")])
prueba = mutate(prueba,sqft_living.nuevo=raw_data$sqft_above/raw_data$sqft_living)
prueba= raw_data
prueba = mutate(prueba,sqft_living.nuevo=raw_data$sqft_above/raw_data$sqft_living)
prueba = mutate(prueba,sqft_basement.nuevo=ifelse(raw_data$sqft_basement>0,raw_data$sqft_above/raw_data$sqft_basement,0))
prueba = mutate(prueba,sqft_lot15.nuevo=raw_data$sqft_lot-raw_data$sqft_lot15)
prueba = mutate(prueba,sqft_living15.nuevo=raw_data$sqft_living-raw_data$sqft_living15)
#prueba$sqft_living=raw_data$sqft_above/raw_data$sqft_living
#prueba$sqft_basement=raw_data$sqft_above/raw_data$sqft_basement
head(prueba)
summary(prueba)
corrplot(cor(prueba[,c("sqft_living.nuevo","sqft_lot","sqft_above","sqft_living15","sqft_lot15","sqft_basement.nuevo")]),method="square")
cor(prueba[,c("sqft_living.nuevo","sqft_lot","sqft_above","sqft_living15.nuevo","sqft_lot15.nuevo","sqft_basement.nuevo")])
prueba= raw_data
prueba = mutate(prueba,sqft_living.nuevo=raw_data$sqft_above/raw_data$sqft_living)
prueba = mutate(prueba,sqft_basement.nuevo=ifelse(raw_data$sqft_basement>0,raw_data$sqft_above/raw_data$sqft_basement,0))
prueba = mutate(prueba,sqft_lot15.nuevo=raw_data$sqft_lot-raw_data$sqft_lot15)
prueba = mutate(prueba,sqft_living15.nuevo=raw_data$sqft_living-raw_data$sqft_living15)
#prueba$sqft_living=raw_data$sqft_above/raw_data$sqft_living
#prueba$sqft_basement=raw_data$sqft_above/raw_data$sqft_basement
head(prueba)
summary(prueba)
corrplot(cor(prueba[,c("sqft_living.nuevo","sqft_lot","sqft_above","sqft_living15.nuevo","sqft_lot15.nuevo","sqft_basement.nuevo")]),method="square")
cor(prueba[,c("sqft_living.nuevo","sqft_lot","sqft_above","sqft_living15.nuevo","sqft_lot15.nuevo","sqft_basement.nuevo")])
prueba= raw_data
prueba = mutate(prueba,sqft_living.nuevo=raw_data$sqft_above/raw_data$sqft_living)
prueba = mutate(prueba,sqft_basement.nuevo=ifelse(raw_data$sqft_basement>0,raw_data$sqft_above/raw_data$sqft_basement,0))
prueba = mutate(prueba,sqft_lot15.nuevo=(raw_data$sqft_lot-raw_data$sqft_lot15)/raw_data$sqft_lot)
prueba = mutate(prueba,sqft_living15.nuevo=(raw_data$sqft_living-raw_data$sqft_living15)/raw_data$sqft_living)
#prueba$sqft_living=raw_data$sqft_above/raw_data$sqft_living
#prueba$sqft_basement=raw_data$sqft_above/raw_data$sqft_basement
head(prueba)
summary(prueba)
corrplot(cor(prueba[,c("sqft_living.nuevo","sqft_lot","sqft_above","sqft_living15.nuevo","sqft_lot15.nuevo","sqft_basement.nuevo")]),method="square")
cor(prueba[,c("sqft_living.nuevo","sqft_lot","sqft_above","sqft_living15.nuevo","sqft_lot15.nuevo","sqft_basement.nuevo")])
plot(prueba$price~prueba$sqft_basement.nuevo)
View(prueba)
plot(prueba$price~prueba$sqft_living.nuevo)
library("dplyr")
install.packages(c("caret", "caTools", "corrplot", "dplyr", "fastDummies", "ggplot2", "lubridate", "randomForest", "rpart.plot"))
library("dplyr")
library("corrplot")
library("fastDummies")
library("ggplot2")
library("rpart")
library("rpart.plot")
library("caret")
library("caTools")
library("randomForest")
library("class")
library("lubridate")
#setwd("~/R-WORKSPACE/Parcial2/parcial-datamining/")
setwd("D:/R/house-pricing")
#setwd("~/R-WORKSPACE/Parcial2/parcial-datamining/")
setwd("~/R-WORKSPACE/Parcial2/parcial-datamining/")
setwd("~/R-WORKSPACE/Parcial2/parcial-datamining/")
getwd()
setwd("~/R-WORKSPACE/Parcial2/parcial-datamining/")
getwd()
setwd("~/R-WORKSPACE/Parcial2/parcial-datamining/")
setwd("C:/R/house-pricing/parcial-datamining")
raw_data <- read.csv("house_data.csv")
raw_data <- read.csv("house_data.csv")
plot(price~., data=raw_data,col="blue")
str(raw_data)
install.packages(c("caret", "caTools", "corrplot", "dplyr", "fastDummies", "ggplot2", "lubridate", "randomForest", "rpart.plot"))
install.packages(c("caret", "caTools", "corrplot", "dplyr", "fastDummies", "ggplot2", "lubridate", "randomForest", "rpart.plot"))
summary(raw_data)
install.packages(c("caret", "caTools", "corrplot", "dplyr", "fastDummies", "ggplot2", "lubridate", "randomForest", "rpart.plot"))
install.packages(c("caret", "caTools", "corrplot", "dplyr", "fastDummies", "ggplot2", "lubridate", "randomForest", "rpart.plot"))
install.packages(c("caret", "caTools", "corrplot", "dplyr", "fastDummies", "ggplot2", "lubridate", "randomForest", "rpart.plot"))
library("dplyr")
library("corrplot")
library("fastDummies")
library("ggplot2")
library("rpart")
library("rpart.plot")
library("caret")
library("caTools")
library("randomForest")
library("class")
library("lubridate")
raw_data <- read.csv("house_data.csv")
plot(price~., data=raw_data,col="blue")
library("dplyr")
library("corrplot")
library("fastDummies")
library("ggplot2")
library("rpart")
library("rpart.plot")
library("caret")
library("caTools")
library("randomForest")
library("class")
library("lubridate")
#setwd("~/R-WORKSPACE/Parcial2/parcial-datamining/")
raw_data <- read.csv("house_data.csv")
plot(price~., data=raw_data,col="blue")
str(raw_data)
summary(raw_data)
par(mfrow = c(1,3))
boxplot(raw_data$price, main="Price")
boxplot(raw_data$bedrooms, main="Cant Bedrooms")
boxplot(raw_data$bathrooms, main="Cant Bathrooms")
par(mfrow = c(1,2))
boxplot(raw_data$sqft_living, main="sqft_living (ft^2)")
boxplot(raw_data$sqft_living15, main="sqft_living15 (ft^2)")
par(mfrow = c(1,2))
boxplot(raw_data$sqft_lot, main="sqft_lot (ft^2)")
boxplot(raw_data$sqft_lot15, main="sqft_lot15 (ft^2)")
par(mfrow = c(1,2))
boxplot(raw_data$sqft_above, main="sqft_above (ft^2)")
boxplot(raw_data$sqft_basement, main="sqft_basement (ft^2)")
df_sqft = select(raw_data, sqft_living, sqft_lot, sqft_above, sqft_living15, sqft_lot15, sqft_basement)
corrplot(cor(df_sqft),method="square")
cor(df_sqft)
prueba = raw_data
prueba$sqft_living = raw_data$sqft_above / raw_data$sqft_living
prueba$sqft_basement = raw_data$sqft_above / raw_data$sqft_basement
head(prueba)
summary(prueba)
corrplot(cor(prueba[,c("sqft_living","sqft_lot","sqft_above","sqft_living15","sqft_lot15","sqft_basement")]),method="square")
prueba= raw_data
prueba = mutate(prueba,sqft_living.nuevo=raw_data$sqft_above/raw_data$sqft_living)
prueba = mutate(prueba,sqft_basement.nuevo=ifelse(raw_data$sqft_basement>0,raw_data$sqft_above/raw_data$sqft_basement,0))
prueba = mutate(prueba,sqft_lot15.nuevo=(raw_data$sqft_lot-raw_data$sqft_lot15)/raw_data$sqft_lot)
prueba = mutate(prueba,sqft_living15.nuevo=(raw_data$sqft_living-raw_data$sqft_living15)/raw_data$sqft_living)
#prueba$sqft_living=raw_data$sqft_above/raw_data$sqft_living
#prueba$sqft_basement=raw_data$sqft_above/raw_data$sqft_basement
head(prueba)
summary(prueba)
corrplot(cor(prueba[,c("sqft_living.nuevo","sqft_lot","sqft_above","sqft_living15.nuevo","sqft_lot15.nuevo","sqft_basement.nuevo")]),method="square")
cor(prueba[,c("sqft_living.nuevo","sqft_lot","sqft_above","sqft_living15.nuevo","sqft_lot15.nuevo","sqft_basement.nuevo")])
plot(raw_data$sqft_living~raw_data$sqft_basement)
plot(prueba$price~prueba$sqft_living.nuevo)
duplicadosID = raw_data[duplicated(raw_data$id), ]
df_sin_repetidos = raw_data %>% group_by(id) %>% filter(price==max(price))
summary(df_sin_repetidos$condition)
summary(df_sin_repetidos$grade)
par(mfrow = c(1,2))
boxplot(df_sin_repetidos$condition, main="condition")
boxplot(df_sin_repetidos$grade, main="grade")
par(mfrow = c(1,2))
pie(table(as.factor(df_sin_repetidos$condition)), main="condition")
pie(table(as.factor(df_sin_repetidos$grade)), main="grade")
df_sqft = select(df_sin_repetidos, price, grade, condition)
corrplot(cor(df_sqft),method="square")
cor(df_sqft)
df_sin_condition = select(df_sin_repetidos, -c(condition))
df_sin_condition$date =  as.Date(df_sin_condition$date, format = "%Y%m%dT000000")
df_fecha_form = df_sin_condition  %>% mutate(date_year = paste(year(date), month(date), sep="/"))
pie(table(df_fecha_form$date_year))
plot(df_fecha_form$price ~ as.factor(df_fecha_form$date_year))
df_sin_date = select(df_sin_condition, -c(date))
prueba2 = mutate(raw_data,)
plot(prueba$price~prueba$sqft_living.nuevo)
#Aca voy a relacionar el año de renovacion y de construccion para ver la correlacion
corrplot(cor(raw_data[,c("yr_renovated","yr_built")]),method="square")
renovacion= filter(raw_data,yr_renovated>0)
#observaciones 914
renovacion2= filter(raw_data,yr_renovated>=yr_built)
#observaciones 914
#por lo tanto los datos de yr renovacion y built tienen sentido por que las que tienen renovacion son posteriores a los de construccion
par(mfrow = c(1,3))
boxplot(renovacion$yr_renovated, main="Renovated")$stats
boxplot(renovacion$yr_built, main="Built")$stats
#Built esta bastante bien a mi parecer, luego renovacion tiene muchos outliners
renovacion= filter(renovacion,yr_renovated>1957)
#Nos quito unas observacioens insignificantes asi que podria ser factible este filtro
par(mfrow = c(1,3))
boxplot(renovacion$yr_renovated, main="Renovated Desdepues del filtro")$stats
summary(renovacion$yr_renovated)
plot(renovacion$price~renovacion$yr_renovated)
raw_data=mutate(raw_data, yr_renovated.nuevo=ifelse(yr_renovated==0,"NoRenovado",ifelse(yr_renovated>1957,"renovado","quitar")))
raw_data=filter(raw_data,yr_renovated.nuevo!="quitar")
raw_data$yr_renovated.nuevo=as.factor(raw_data$yr_renovated.nuevo)
par(mfrow = c(1,2))
pie(summary(as.factor(raw_data$yr_renovated.nuevo)), labels = c("No_renovado","renovado"), main = "Distribución de 'Renovacion'")
plot(raw_data$price~raw_data$yr_renovated.nuevo)
raw_data <- dummy_cols(raw_data, select_columns = c("yr_renovated.nuevo"))
raw_data$yr_renovated.nuevo <- NULL
corrplot(cor(raw_data[,c("yr_renovated.nuevo_renovado","yr_renovated.nuevo_NoRenovado","price")]),method="square")
cor(raw_data[,c("yr_renovated.nuevo_renovado","yr_renovated.nuevo_NoRenovado","price")])
