# Realización de un sumario de los datos
replace_outliers <- function(x, removeNA = TRUE){
qrts <- quantile(x, probs = c(0.25, 0.75), na.rm = removeNA)
caps <- quantile(x, probs = c(.05, .95), na.rm = removeNA)
iqr <- qrts[2]-qrts[1]
h <- 1.5 * iqr
x[x<qrts[1]-h] <- caps[1]
x[x>qrts[2]+h] <- caps[2]
x
}
capped_pressure_height <- replace_outliers(raw_data$time_spend_company)
par(mfrow = c(1,2))
boxplot(raw_data$time_spend_company, main = "Presión con outliers"
,col=5)
boxplot(capped_pressure_height, main = "Presión sin outliers",col=6)
quantile(raw_data$time_spend_company, c(.05, .90))
summary(raw_data$time_spend_company)
View(cor1)
library("dplyr")
library("corrplot")
library("fastDummies")
library("ggplot2")
library("rpart")
library("rpart.plot")
library("caret")
library("caTools")
library("randomForest")
library("class")
# Carga de datos
raw_data <- read.csv("recursos_humanos.csv")
# Carga de datos
raw_data <- read.csv("recursos_humanos.csv")
# Carga de datos
raw_data <- read.csv("recursos_humanos.csv")
# Establecimiento del directorio de trabajo
setwd("~/workspaces/R/rrhh-left")
# Realización de un sumario de los datos
summary(raw_data)
str(raw_data)
par(mfrow = c(1,2))
boxplot(raw_data$satisfaction_level, main = "Satisfaction Level")
boxplot(raw_data$last_evaluation, main = "Last Evaluation")
par(mfrow = c(1,2))
boxplot(raw_data$number_project, main = "Number of Project")
boxplot(raw_data$average_montly_hours, main = "Average Montly Hours")
par(mfrow = c(1,2))
boxplot(raw_data$time_spend_company, main = "Time Spend Company")
par(mfrow = c(1,2))
pie(summary(as.factor(raw_data$Work_accident)), labels = c("Yes","No"), main = "Distribución de 'Work Accident'")
pie(summary(as.factor(raw_data$left)), labels = c("Yes","No"), main = "Distribución de 'Left'")
par(mfrow = c(1,2))
pie(summary(as.factor(raw_data$promotion_last_5years)), labels = c("Yes","No"), main = "Distribución de 'Promotion'")
pie(summary(raw_data$sales), main = "Distribución de 'Sales'")
par(mfrow = c(1,2))
pie(summary(raw_data$salary), main = "Distribución de 'Salary'")
# Enconding de la coluna 'Sales'.
raw_data <- dummy_cols(raw_data, select_columns = c("sales"))
raw_data$sales = NULL
# Enconding de la columna 'Salary'.
raw_data <- dummy_cols(raw_data, select_columns = c("salary"))
raw_data$salary = NULL
# Cálculo de la corralación de todo el dataset.
data_correlation <- cor(raw_data)
data_correlation
#Plot de las Correlaciones
corrplot(data_correlation, method = "square")
ggplot(raw_data, aes(x = satisfaction_level, y = last_evaluation, color = as.factor(left))) + geom_point()
#avergTimeSpend <- lm(formula = time_spend_company~average_montly_hours , data = raw_data)
satLevelLm <- lm(formula = satisfaction_level~. , data = raw_data)
lastEvaluationLm <- lm(formula = last_evaluation~. , data = raw_data)
numberProjectLm <- lm(formula = number_project~. , data = raw_data)
averageMontlyHoursLm <- lm(formula = average_montly_hours~. , data = raw_data)
timeSpendCompanyLm <- lm(formula = time_spend_company~. , data = raw_data)
workAccidentLm <- lm(formula = Work_accident~. , data = raw_data)
summary(satLevelLm)
summary(lastEvaluationLm)
summary(numberProjectLm)
summary(averageMontlyHoursLm)
summary(timeSpendCompanyLm)
summary(workAccidentLm)
#Average_montly
aveLastEva <- lm(formula =average_montly_hours~last_evaluation , data = raw_data)
aveNumberProj <- lm(formula =average_montly_hours~number_project , data = raw_data)
aveWorkAccident <- lm(formula =average_montly_hours~Work_accident , data = raw_data)
summary(aveLastEva)
summary(aveNumberProj)
summary(aveWorkAccident)
#Average_montly
modelo <- lm(formula =left~. , data = raw_data)
step(object = modelo, direction = "both", trace = 1)
#Average_montly
modelo <- lm(formula =left~. , data = raw_data)
summary(modelo)
#step(object = modelo, direction = "both", trace = 1)
install.packages("car")
#Average_montly
modelo <- glm(formula =left~. , data = raw_data)
library("car")
logit <- glm(formula = left ~ last_evaluation + satisfaction_level, data = raw_data, family = "binomial")
summary(logit)
vif(logit)
#summary(modelo)
#step(object = modelo, direction = "both", trace = 1)
#Average_montly
logit <- glm(formula = left ~ ., data = raw_data, family = "binomial")
summary(logit)
vif(logit)
#Average_montly
logit <- glm(formula = left ~ ., data = raw_data, family = "binomial")
summary(logit)
vif(logit)
#Average_montly
library("car")
logit <- glm(formula = left ~ ., data = raw_data, family = "binomial")
summary(logit)
vif(logit)
detach("package:car", unload = TRUE)
library(car)
#Average_montly
library("car")
logit <- glm(formula = left ~ ., data = raw_data, family = "binomial")
summary(logit)
vif(logit)
#Average_montly
library("car")
logit <- glm(formula = left ~ ., data = raw_data, family = "binomial")
summary(logit)
vif(logit)
#Average_montly
library("car")
logit <- lm(formula = left ~ ., data = raw_data)
summary(logit)
VIF(logit)
#Average_montly
library("car")
logit <- lm(formula = left ~ ., data = raw_data)
summary(logit)
vif(logit)
library("dplyr")
library("corrplot")
library("fastDummies")
library("ggplot2")
library("rpart")
library("rpart.plot")
library("caret")
library("caTools")
library("randomForest")
library("class")
library("car")
#Average_montly
logit <- lm(formula = left ~ ., data = raw_data)
summary(logit)
vif(logit)
#Average_montly
logit <- lm(formula = time_spend_company ~ average_montly_hours, data = raw_data)
summary(logit)
vif(logit)
#Average_montly
logit <- lm(formula = left ~time_spend_company+ average_montly_hours, data = raw_data)
summary(logit)
vif(logit)
#summary(modelo)
#step(object = modelo, direction = "both", trace = 1)
#Average_montly
logit <- lm(formula = left ~time_spend_company+ average_montly_hours, data = raw_data)
vif(logit)
#summary(modelo)
#step(object = modelo, direction = "both", trace = 1)
#Average_montly
logit <- lm(formula = left ~ last_evaluation + satisfaction_level, data = raw_data)
vif(logit)
#summary(modelo)
#step(object = modelo, direction = "both", trace = 1)
#Average_montly
logit <- lm(formula = left ~ last_evaluation + satisfaction_level+average_montly_hours, data = raw_data)
vif(logit)
#summary(modelo)
#step(object = modelo, direction = "both", trace = 1)
#Average_montly
logit <- lm(formula = left ~ last_evaluation + satisfaction_level+average_montly_hours+number_poject, data = raw_data)
#Average_montly
logit <- lm(formula = left ~ last_evaluation + satisfaction_level+average_montly_hours+number_project, data = raw_data)
vif(logit)
#summary(modelo)
#step(object = modelo, direction = "both", trace = 1)
#Average_montly
logit <- lm(formula = left ~ ., data = raw_data)
step(object = modelo, direction = "both", trace = 1)
vif(logit)
#Average_montly
logit <- lm(formula = left ~ ., data = raw_data)
step(object = modelo, direction = "both", trace = 1)
logit <- glm(formula = left ~ satisfaction_level + last_evaluation + number_project +
average_montly_hours + time_spend_company + Work_accident +
promotion_last_5years + sales_hr + sales_IT + sales_management +
sales_product_mng + sales_RandD + salary_high + salary_low,
data = raw_data)
vif(logit)
#summary(modelo)
#step(object = modelo, direction = "both", trace = 1)
#Average_montly
logit <- lm(formula = left ~ ., data = raw_data)
step(object = modelo, direction = "both", trace = 1)
logit <- lm(formula = left ~ satisfaction_level + last_evaluation + number_project +
average_montly_hours + time_spend_company + Work_accident +
promotion_last_5years + sales_hr + sales_IT + sales_management +
sales_product_mng + sales_RandD + salary_high + salary_low,
data = raw_data)
vif(logit)
#summary(modelo)
#step(object = modelo, direction = "both", trace = 1)
#Average_montly
logit <- lm(formula = number_project ~ average_montly_hours, data = raw_data)
#step(object = modelo, direction = "both", trace = 1)
#logit <- lm(formula = left ~ satisfaction_level + last_evaluation + number_project + average_montly_hours + time_spend_company + Work_accident + promotion_last_5years + sales_hr + sales_IT + sales_management + sales_product_mng + sales_RandD + salary_high + salary_low, data = raw_data)
vif(logit)
#Average_montly
logit <- lm(formula = left ~ number_project+average_montly_hours, data = raw_data)
#step(object = modelo, direction = "both", trace = 1)
#logit <- lm(formula = left ~ satisfaction_level + last_evaluation + number_project + average_montly_hours + time_spend_company + Work_accident + promotion_last_5years + sales_hr + sales_IT + sales_management + sales_product_mng + sales_RandD + salary_high + salary_low, data = raw_data)
vif(logit)
#summary(modelo)
#step(object = modelo, direction = "both", trace = 1)
#Average_montly
logit <- lm(formula = left ~ number_project+average_montly_hours, data = raw_data)
#step(object = modelo, direction = "both", trace = 1)
modelo <- glm(formula = left ~ satisfaction_level + last_evaluation + number_project + average_montly_hours + time_spend_company + Work_accident + promotion_last_5years + sales_hr + sales_IT + sales_management + sales_product_mng + sales_RandD + salary_high + salary_low, data = raw_data)
vif(logit)
#summary(modelo)
#step(object = modelo, direction = "both", trace = 1)
# Dividimos el dataset en dos
# El primer conjunto para el entrenamiento que consiste en un 70% de las observaciones.
data_train_1 <- sample_frac(raw_data, 0.7)
prop.table(table(data_train_1$left))
# El segundo conjunto es para el testing que consiste en el 30% de las observaciones restantes.
data_test_1 <- setdiff(raw_data, data_train_1)
prop.table(table(data_test_1$left))
data_train_1$left <- factor(data_train_1$left)
data_test_1$left <- factor(data_test_1$left)
# Implementación el árbol de decisión.
tree_1 <- rpart(formula = left ~ ., data = data_train_1)
tree_1
# Graficamos el árbol de decisión
rpart.plot(tree_1)
# Generamos un vector con los valores predichos
prediccion <- predict(tree_1, newdata = data_test_1, type = "class")
# Cruzamiento de la predicción con los datos reales del dataset de prueba
confusionMatrix(prediccion, data_test_1[["left"]])
install.packages("e1071")
library(e1071)
# Generamos un vector con los valores predichos
prediccion <- predict(tree_1, newdata = data_test_1, type = "class")
# Cruzamiento de la predicción con los datos reales del dataset de prueba
confusionMatrix(prediccion, data_test_1[["left"]])
data_train_3 <- sample_frac(raw_data, 0.7)
data_test_3 <- setdiff(raw_data, data_train_3)
data_train_3$left <- factor(data_train_3$left)
data_test_3$left <- factor(data_test_3$left)
tree_3 <- rpart(formula = left ~ ., data = data_train_3)
rpart.plot(tree_3)
prediccion_3 <- predict(tree_3, newdata = data_test_3, type = "class")
confusionMatrix(prediccion_3, data_test_3[["left"]])
glm.model <- glm(formula = left ~ ., data = data_train_1, family = binomial(modelo))
glm.model <- glm(formula = left ~ ., data = data_train_1, family = binomial(modelo))
glm.model <- glm(formula = left ~ ., data = data_train_1, family = binomial(modelo))
glm.model <- glm(formula = left ~ ., data = data_train_1, family = binomial(modelo))
glm.model <- glm(formula =left ~ satisfaction_level + last_evaluation + number_project + average_montly_hours + time_spend_company + Work_accident + promotion_last_5years + sales_hr + sales_IT + sales_management + sales_product_mng + sales_RandD + salary_high + salary_low, data = data_train_1, family = binomial(modelo))
#Average_montly
logit <- lm(formula = left ~ number_project+average_montly_hours, data = raw_data)
#step(object = modelo, direction = "both", trace = 1)
modelo <- glm(formula = left ~ satisfaction_level + last_evaluation + number_project + average_montly_hours + time_spend_company + Work_accident + promotion_last_5years + sales_hr + sales_IT + sales_management + sales_product_mng + sales_RandD + salary_high + salary_low, data = raw_data, family="binomial")
vif(logit)
#summary(modelo)
#step(object = modelo, direction = "both", trace = 1)
glm.model <- glm(formula =left ~ satisfaction_level + last_evaluation + number_project + average_montly_hours + time_spend_company + Work_accident + promotion_last_5years + sales_hr + sales_IT + sales_management + sales_product_mng + sales_RandD + salary_high + salary_low, data = data_train_1, family = binomial(modelo))
glm.model <- glm(formula =left ~ satisfaction_level + last_evaluation + number_project + average_montly_hours + time_spend_company + Work_accident + promotion_last_5years + sales_hr + sales_IT + sales_management + sales_product_mng + sales_RandD + salary_high + salary_low, data = data_train_1, family = binomial(logit))
summary(glm.model)
lgm.predict <- round(predict(glm.model, data_train_1, type = "response"))
lgm.predict <- factor(lgm.predict)
confusionMatrix(lgm.predict, data_train_1$left)
rf.model <- randomForest(left~., data = data_train_1)
rf.prediction <- predict(rf.model, data_test_1, type = "class")
#Average_montly
logit <- lm(formula = left ~ number_project+average_montly_hours, data = raw_data)
step(object = modelo, direction = "both", trace = 1)
logit <- glm(formula = left ~ satisfaction_level + last_evaluation + number_project + average_montly_hours + time_spend_company + Work_accident + promotion_last_5years + sales_hr + sales_IT + sales_management + sales_product_mng + sales_RandD + salary_high + salary_low, data = raw_data)
vif(logit)
# Establecimiento del directorio de trabajo
setwd("~/workspaces/R/rrhh-left")
# Carga de datos
raw_data <- read.csv("recursos_humanos.csv")
# Realización de un sumario de los datos
summary(raw_data)
str(raw_data)
View(raw_data)
knitr::opts_chunk$set(echo = TRUE)
raw_data <- read.csv("house_data.csv")
library("dplyr")
library("corrplot")
library("fastDummies")
library("ggplot2")
library("rpart")
library("rpart.plot")
library("caret")
library("caTools")
library("randomForest")
library("class")
getwd()
setwd("C:/R/house-pricing")
setwd("C://R//house-pricing")
setwd("D://R//house-pricing")
raw_data <- read.csv("house_data.csv")
plot(price~., data=raw_data,col="blue")
plot(raw_data$sqft_above~raw_data$sqft_basement, data=raw_data,col="blue")
plot(raw_data$sqft_lot~raw_data$sqft_basement+raw_data$sqft_above, data=raw_data,col="blue")
prueba <= filter(raw_data$sqft_lot<5000)
prueba <= filter(raw_data,sqft_lot<5000)
prueba = filter(raw_data,sqft_lot<5000)
plot(prueba$sqft_lot~prueba$sqft_basement+prueba$sqft_above, data=raw_data,col="blue")
plot(price~., data=raw_data,col="blue")
prueba = filter(raw_data,sqft_lot<2000)
plot(prueba$sqft_lot~prueba$sqft_basement+prueba$sqft_above, data=raw_data,col="blue")
prueba = filter(raw_data,sqft_lot<3000)
plot(prueba$sqft_lot~prueba$sqft_basement+prueba$sqft_above, data=raw_data,col="blue")
```{r Librerías}
corrplot(raw_data[,c("sqft_above","sqfl_basement","sqft_lot","sqt_living15","sqft_lot15")],method="square")
cor(raw_data[,c("sqft_above","sqfl_basement","sqft_lot","sqt_living15","sqft_lot15")],method="square")
corrplot(cor(raw_data[,c("sqft_above","sqfl_basement","sqft_lot","sqt_living15","sqft_lot15")]),method="square")
corrplot(cor(raw_data[,c("sqft_above","sqfl_basement","sqft_lot","sqt_living15","sqft_lot15")]),method="square")
View(raw_data)
View(raw_data)
corrplot(cor(raw_data[,c("sqft_above","sqfl_basement","sqft_lot","sqt_living15","sqft_lot15")]),method="square")
View(raw_data)
corrplot(cor(raw_data[,c("sqft_above")]),method="square")
corrplot(cor(raw_data[,c("sqft_above","sqft_living")]),method="square")
corrplot(cor(raw_data[,c("sqft_above","sqft_living","sqft_living15")]),method="square")
corrplot(cor(raw_data[,c("sqft_living","sqft_lot","sqft_above","sqft_living15","sqft_above","sqft_basement")]),method="square")
corrplot(cor(raw_data[,c("sqft_living","sqft_lot","sqft_above","sqft_living15","sqft_lot15","sqft_basement")]),method="square")
matriz=corrplot(cor(raw_data[,c("sqft_living","sqft_lot","sqft_above","sqft_living15","sqft_lot15","sqft_basement")]),method="square")
summary(matriz)
cor(raw_data[,c("sqft_living","sqft_lot","sqft_above","sqft_living15","sqft_lot15","sqft_basement")])
summary(matriz)
matriz=(raw_data[,c("sqft_living","sqft_lot","sqft_above","sqft_living15","sqft_lot15","sqft_basement")])
corrplot(matriz,method="square")
corrplot(cor(raw_data[,c("sqft_living","sqft_lot","sqft_above","sqft_living15","sqft_lot15","sqft_basement")]),method="square")
cor(raw_data[,c("sqft_living","sqft_lot","sqft_above","sqft_living15","sqft_lot15","sqft_basement")])
ver = raw_data$sqft_above/raw_data$sqft_living
ver = raw_data$sqft_above/raw_data$sqft_living
describe(ver)
ver = raw_data$sqft_above/raw_data$sqft_living
summary(ver)
ver = funtion(x,y){
ver = funtion(x,y){
ver = funtion(x,y){
ver = funtion(x,y){
ver = function(x,y){
if(y>0){
return(x/y)
}else
{
return(y)
}
}
ver(raw_data$sqft_above,raw_data$sqft_living)
ver = function(x,y){
if(y>0){
return(x/y)
}else
{
return(y)
}
}
ver(raw_data$sqft_above,raw_data$sqft_living)
ver = function(x,y){
if(y>0){
return(x/y)
}else
{
return(y)
}
}
data.frame(ver(raw_data$sqft_above,raw_data$sqft_living))
ver = function(x,y){
if(y>0){
return(x/y)
}else
{
return(y)
}
}
data.frame(c(ver(raw_data$sqft_above,raw_data$sqft_living)))
ver = function(x,y){
if(y>0){
return(x/y)
}else
{
return(y)
}
}
d=data.frame(c(ver(raw_data$sqft_above,raw_data$sqft_living)))
prueba<= raw_data
prueba= raw_data
prueba$sqft_living=raw_data$sqft_above/raw_data$sqft_living
prueba= raw_data
prueba$sqft_living=raw_data$sqft_above/raw_data$sqft_living
corrplot(cor(prueba[,c("sqft_living","sqft_lot","sqft_above","sqft_living15","sqft_lot15","sqft_basement")]),method="square")
cor(prueba[,c("sqft_living","sqft_lot","sqft_above","sqft_living15","sqft_lot15","sqft_basement")])
prueba= raw_data
prueba$sqft_living=raw_data$sqft_above/raw_data$sqft_living
prueba$sqft_living=raw_data$sqft_above/raw_data$sqft_basement
corrplot(cor(prueba[,c("sqft_living","sqft_lot","sqft_above","sqft_living15","sqft_lot15","sqft_basement")]),method="square")
cor(prueba[,c("sqft_living","sqft_lot","sqft_above","sqft_living15","sqft_lot15","sqft_basement")])
View(prueba)
prueba= raw_data
prueba$sqft_living=raw_data$sqft_above/raw_data$sqft_living
prueba$sqft_living=raw_data$sqft_above/raw_data$sqft_basement
describe(prueba)
prueba= raw_data
prueba$sqft_living=raw_data$sqft_above/raw_data$sqft_living
prueba$sqft_living=raw_data$sqft_above/raw_data$sqft_basement
head(prueba)
corrplot(cor(prueba[,c("sqft_living","sqft_lot","sqft_above","sqft_living15","sqft_lot15","sqft_basement")]),method="square")
cor(prueba[,c("sqft_living","sqft_lot","sqft_above","sqft_living15","sqft_lot15","sqft_basement")])
prueba= raw_data
prueba$sqft_living=raw_data$sqft_above/raw_data$sqft_living
prueba$sqft_basement=raw_data$sqft_above/raw_data$sqft_basement
head(prueba)
corrplot(cor(prueba[,c("sqft_living","sqft_lot","sqft_above","sqft_living15","sqft_lot15","sqft_basement")]),method="square")
cor(prueba[,c("sqft_living","sqft_lot","sqft_above","sqft_living15","sqft_lot15","sqft_basement")])
prueba= raw_data
prueba$sqft_living=raw_data$sqft_above/raw_data$sqft_living
prueba$sqft_basement=raw_data$sqft_above/raw_data$sqft_basement
head(prueba)
summary(prueba)
corrplot(cor(prueba[,c("sqft_living","sqft_lot","sqft_above","sqft_living15","sqft_lot15","sqft_basement")]),method="square")
cor(prueba[,c("sqft_living","sqft_lot","sqft_above","sqft_living15","sqft_lot15","sqft_basement")])
prueba= raw_data
prueba <= mutate(prueba,sqft_living=raw_data$sqft_above/raw_data$sqft_living)
#prueba$sqft_living=raw_data$sqft_above/raw_data$sqft_living
#prueba$sqft_basement=raw_data$sqft_above/raw_data$sqft_basement
head(prueba)
summary(prueba)
corrplot(cor(prueba[,c("sqft_living","sqft_lot","sqft_above","sqft_living15","sqft_lot15","sqft_basement")]),method="square")
cor(prueba[,c("sqft_living","sqft_lot","sqft_above","sqft_living15","sqft_lot15","sqft_basement")])
prueba= raw_data
prueba <= mutate(prueba,nuevo=raw_data$sqft_above/raw_data$sqft_living)
prueba= raw_data
prueba <= mutate(prueba,data.nuevo=raw_data$sqft_above/raw_data$sqft_living)
prueba= raw_data
prueba <= mutate(prueba,data.nuevo=raw_data$sqft_above/raw_data$sqft_living)
prueba= raw_data
prueba = mutate(prueba,data.nuevo=raw_data$sqft_above/raw_data$sqft_living)
#prueba$sqft_living=raw_data$sqft_above/raw_data$sqft_living
#prueba$sqft_basement=raw_data$sqft_above/raw_data$sqft_basement
head(prueba)
summary(prueba)
corrplot(cor(prueba[,c("sqft_living","sqft_lot","sqft_above","sqft_living15","sqft_lot15","sqft_basement")]),method="square")
cor(prueba[,c("sqft_living","sqft_lot","sqft_above","sqft_living15","sqft_lot15","sqft_basement")])
prueba= raw_data
prueba = mutate(prueba,data.nuevo=raw_data$sqft_above/raw_data$sqft_living)
#prueba$sqft_living=raw_data$sqft_above/raw_data$sqft_living
#prueba$sqft_basement=raw_data$sqft_above/raw_data$sqft_basement
head(prueba)
summary(prueba)
corrplot(cor(prueba[,c("data.nuevo","sqft_lot","sqft_above","sqft_living15","sqft_lot15","sqft_basement")]),method="square")
cor(prueba[,c("data.nuevo","sqft_lot","sqft_above","sqft_living15","sqft_lot15","sqft_basement")])
prueba= raw_data
prueba = mutate(prueba,sqft_living.nuevo=raw_data$sqft_above/raw_data$sqft_living)
prueba = mutate(prueba,sqft_basement.nuevo=ifelse(raw_data$sqft_basement>0,raw_data$sqft_above/raw_data$sqft_basement,0))
#prueba$sqft_living=raw_data$sqft_above/raw_data$sqft_living
#prueba$sqft_basement=raw_data$sqft_above/raw_data$sqft_basement
head(prueba)
summary(prueba)
corrplot(cor(prueba[,c("sqft_living.nuevo","sqft_lot","sqft_above","sqft_living15","sqft_lot15","sqft_basement.nuevo")]),method="square")
cor(prueba[,c("sqft_living.nuevo","sqft_lot","sqft_above","sqft_living15","sqft_lot15","sqft_basement.nuevo")])
prueba = mutate(prueba,sqft_living.nuevo=raw_data$sqft_above/raw_data$sqft_living)
prueba= raw_data
prueba = mutate(prueba,sqft_living.nuevo=raw_data$sqft_above/raw_data$sqft_living)
prueba = mutate(prueba,sqft_basement.nuevo=ifelse(raw_data$sqft_basement>0,raw_data$sqft_above/raw_data$sqft_basement,0))
prueba = mutate(prueba,sqft_lot15.nuevo=raw_data$sqft_lot-raw_data$sqft_lot15)
prueba = mutate(prueba,sqft_living15.nuevo=raw_data$sqft_living-raw_data$sqft_living15)
#prueba$sqft_living=raw_data$sqft_above/raw_data$sqft_living
#prueba$sqft_basement=raw_data$sqft_above/raw_data$sqft_basement
head(prueba)
summary(prueba)
corrplot(cor(prueba[,c("sqft_living.nuevo","sqft_lot","sqft_above","sqft_living15","sqft_lot15","sqft_basement.nuevo")]),method="square")
cor(prueba[,c("sqft_living.nuevo","sqft_lot","sqft_above","sqft_living15.nuevo","sqft_lot15.nuevo","sqft_basement.nuevo")])
prueba= raw_data
prueba = mutate(prueba,sqft_living.nuevo=raw_data$sqft_above/raw_data$sqft_living)
prueba = mutate(prueba,sqft_basement.nuevo=ifelse(raw_data$sqft_basement>0,raw_data$sqft_above/raw_data$sqft_basement,0))
prueba = mutate(prueba,sqft_lot15.nuevo=raw_data$sqft_lot-raw_data$sqft_lot15)
prueba = mutate(prueba,sqft_living15.nuevo=raw_data$sqft_living-raw_data$sqft_living15)
#prueba$sqft_living=raw_data$sqft_above/raw_data$sqft_living
#prueba$sqft_basement=raw_data$sqft_above/raw_data$sqft_basement
head(prueba)
summary(prueba)
corrplot(cor(prueba[,c("sqft_living.nuevo","sqft_lot","sqft_above","sqft_living15.nuevo","sqft_lot15.nuevo","sqft_basement.nuevo")]),method="square")
cor(prueba[,c("sqft_living.nuevo","sqft_lot","sqft_above","sqft_living15.nuevo","sqft_lot15.nuevo","sqft_basement.nuevo")])
prueba= raw_data
prueba = mutate(prueba,sqft_living.nuevo=raw_data$sqft_above/raw_data$sqft_living)
prueba = mutate(prueba,sqft_basement.nuevo=ifelse(raw_data$sqft_basement>0,raw_data$sqft_above/raw_data$sqft_basement,0))
prueba = mutate(prueba,sqft_lot15.nuevo=(raw_data$sqft_lot-raw_data$sqft_lot15)/raw_data$sqft_lot)
prueba = mutate(prueba,sqft_living15.nuevo=(raw_data$sqft_living-raw_data$sqft_living15)/raw_data$sqft_living)
#prueba$sqft_living=raw_data$sqft_above/raw_data$sqft_living
#prueba$sqft_basement=raw_data$sqft_above/raw_data$sqft_basement
head(prueba)
summary(prueba)
corrplot(cor(prueba[,c("sqft_living.nuevo","sqft_lot","sqft_above","sqft_living15.nuevo","sqft_lot15.nuevo","sqft_basement.nuevo")]),method="square")
cor(prueba[,c("sqft_living.nuevo","sqft_lot","sqft_above","sqft_living15.nuevo","sqft_lot15.nuevo","sqft_basement.nuevo")])
plot(prueba$price~prueba$sqft_basement.nuevo)
View(prueba)
plot(prueba$price~prueba$sqft_living.nuevo)
